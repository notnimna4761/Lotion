{"ast":null,"code":"var _jsxFileName = \"/Users/nimnawijedasa/Desktop/Winter/ENSF_381/week6/Lotion/src/Mainbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Mainbar(_ref) {\n  _s();\n  let {\n    onDeleteNote,\n    activeNote\n  } = _ref;\n  const [value, setValue] = useState('');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mainbar-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"mainbar-title\",\n        children: \" Note 1 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"mainbar-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"save_button\",\n          children: \"save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onDeleteNote(activeNote.id),\n          id: \"delete_button\",\n          children: \"delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"mainbar-content\",\n      children: [/*#__PURE__*/_jsxDEV(ReactQuill, {\n        theme: \"snow\",\n        value: value,\n        onChange: setValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), \" sdfsd sdfsdf sdfsdfsd Controlled mode caveats In controlled mode, components are supposed to prevent local stateful changes, and instead only have them happen through onChange and value. Because Quill handles its own changes, and does not allow preventing edits, ReactQuill has to settle for a hybrid between controlled and uncontrolled mode. It can't prevent the change, but will still override the content whenever value differs from current state. If you frequently need to manipulate the DOM or use the Quill APIs imperatively, you might consider switching to fully uncontrolled mode. ReactQuill will initialize the editor using defaultValue, but won't try to reset it after that. The onChange callback will still work as expected. Read more about uncontrolled components in the React docs. Using Deltas You can pass a Quill Delta, instead of an HTML string, as the value and defaultValue properties. Deltas have a number of advantages over HTML strings, so you might want use them instead. Be aware, however, that comparing Deltas for changes is more expensive than comparing HTML strings, so it might be worth to profile your usage patterns. Note that switching value from an HTML string to a Delta, or vice-versa, will trigger a change, regardless of whether they represent the same document, so you might want to stick to a format and keep using it consistently throughout. \\u26A0\\uFE0F Do not use the delta object you receive from the onChange event as value. This object does not contain the full document, but only the last modifications, and doing so will most likely trigger an infinite loop where the same changes are applied over and over again. Use editor.getContents() during the event to obtain a Delta of the full document instead. ReactQuill will prevent you from making such a mistake, however if you are absolutely sure that this is what you want, you can pass the object through new Delta() again to un-taint it.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_s(Mainbar, \"A2PXPeq8TepW328gUMM4+o8Xryo=\");\n_c = Mainbar;\nexport default Mainbar;\nvar _c;\n$RefreshReg$(_c, \"Mainbar\");","map":{"version":3,"names":["React","useState","ReactQuill","jsxDEV","_jsxDEV","Mainbar","_ref","_s","onDeleteNote","activeNote","value","setValue","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","theme","onChange","_c","$RefreshReg$"],"sources":["/Users/nimnawijedasa/Desktop/Winter/ENSF_381/week6/Lotion/src/Mainbar.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nfunction Mainbar({onDeleteNote,activeNote }) {\n    const [value, setValue] = useState('');\n\n    return (\n        <div id =\"mainbar\">\n            <div id = \"mainbar-header\">\n                <h1 id = \"mainbar-title\"> Note 1 </h1>\n                <div id = \"mainbar-buttons\">\n                    <button id = \"save_button\" >save</button>\n                    {/* i changed this to notes instead of note how do i delete if not?? i need to have note */}\n                    <button onClick= {() => onDeleteNote(activeNote.id)} id = \"delete_button\">delete</button>\n                </div>\n            </div>\n            <div id = \"mainbar-content\">\n            <ReactQuill theme=\"snow\" value={value} onChange={setValue} /> sdfsd\n            sdfsdf\n            sdfsdfsd\n            Controlled mode caveats\n\nIn controlled mode, components are supposed to prevent local stateful changes, and instead only have them happen through onChange and value.\n\nBecause Quill handles its own changes, and does not allow preventing edits, ReactQuill has to settle for a hybrid between controlled and uncontrolled mode. It can't prevent the change, but will still override the content whenever value differs from current state.\n\nIf you frequently need to manipulate the DOM or use the Quill APIs imperatively, you might consider switching to fully uncontrolled mode. ReactQuill will initialize the editor using defaultValue, but won't try to reset it after that. The onChange callback will still work as expected.\n\nRead more about uncontrolled components in the React docs.\nUsing Deltas\n\nYou can pass a Quill Delta, instead of an HTML string, as the value and defaultValue properties. Deltas have a number of advantages over HTML strings, so you might want use them instead. Be aware, however, that comparing Deltas for changes is more expensive than comparing HTML strings, so it might be worth to profile your usage patterns.\n\nNote that switching value from an HTML string to a Delta, or vice-versa, will trigger a change, regardless of whether they represent the same document, so you might want to stick to a format and keep using it consistently throughout.\n\n⚠️ Do not use the delta object you receive from the onChange event as value. This object does not contain the full document, but only the last modifications, and doing so will most likely trigger an infinite loop where the same changes are applied over and over again. Use editor.getContents() during the event to obtain a Delta of the full document instead. ReactQuill will prevent you from making such a mistake, however if you are absolutely sure that this is what you want, you can pass the object through new Delta() again to un-taint it.\n\n            </div>\n\n        </div>\n    );\n}\nexport default Mainbar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,OAAOA,CAAAC,IAAA,EAA6B;EAAAC,EAAA;EAAA,IAA5B;IAACC,YAAY;IAACC;EAAW,CAAC,GAAAH,IAAA;EACvC,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,oBACIG,OAAA;IAAKQ,EAAE,EAAE,SAAS;IAAAC,QAAA,gBACdT,OAAA;MAAKQ,EAAE,EAAG,gBAAgB;MAAAC,QAAA,gBACtBT,OAAA;QAAIQ,EAAE,EAAG,eAAe;QAAAC,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACtCb,OAAA;QAAKQ,EAAE,EAAG,iBAAiB;QAAAC,QAAA,gBACvBT,OAAA;UAAQQ,EAAE,EAAG,aAAa;UAAAC,QAAA,EAAE;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAEzCb,OAAA;UAAQc,OAAO,EAAGA,CAAA,KAAMV,YAAY,CAACC,UAAU,CAACG,EAAE,CAAE;UAACA,EAAE,EAAG,eAAe;UAAAC,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ,eACNb,OAAA;MAAKQ,EAAE,EAAG,iBAAiB;MAAAC,QAAA,gBAC3BT,OAAA,CAACF,UAAU;QAACiB,KAAK,EAAC,MAAM;QAACT,KAAK,EAAEA,KAAM;QAACU,QAAQ,EAAET;MAAS;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,o5DAoB7D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEJ;AAEd;AAACV,EAAA,CAtCQF,OAAO;AAAAgB,EAAA,GAAPhB,OAAO;AAuChB,eAAeA,OAAO;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}